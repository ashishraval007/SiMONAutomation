package com.ctl.it.qa.simon.tools.pages.common;


import java.util.Map;

import net.serenitybdd.core.SerenityReports;
import static org.hamcrest.MatcherAssert.assertThat;

import org.openqa.jetty.jetty.servlet.SessionManager.Session;
import org.openqa.selenium.By;
import org.w3c.dom.Element;
import org.yecht.Data;

import net.serenitybdd.core.annotations.findby.FindBy;
import net.serenitybdd.core.pages.WebElementFacade;
import net.serenitybdd.cucumber.SerenityReporter;

import com.ctl.it.qa.simon.tools.pages.SimonPage;
import com.ctl.it.qa.staf.AutoPopulate;
import com.ctl.it.qa.staf.xml.reader.IntDataContainer;
import com.gargoylesoftware.htmlunit.xml.XmlUtil;



public class LoginPage extends SimonPage{ 
	
	private static IntDataContainer data;	
	private AutoPopulate autoPopulate = new AutoPopulate();
	
	//USERNAME
	@FindBy(id = "userName")
	public WebElementFacade tbx_username;	
	
	//PASSWORD
	@FindBy(id = "password")
	public WebElementFacade tbx_password;	
	
	//LOGIN BUTTON
	@FindBy(id = "LoginBtn")
	public WebElementFacade btn_logInToSiMON;

	//ENVIRONMENT
	@FindBy(id = "environment")
	public WebElementFacade ddl_environment;
	
	//ERROR DIV
	@FindBy(className = "error")
	public WebElementFacade div_ErrorMessage;
	
	
	public LoginPage(){
		initialize();
		this.data = envData.getContainer(this.getClass().getSimpleName()); 
	}
	
	public void isExist(){
		
		SimonPage.MainWindowHnd=getDriver().getWindowHandle().toString();	
		
		getDriver().switchTo().frame(0);
		assertThat("User is NOT on Login Page", btn_logInToSiMON.isPresent());
	
	}
     
	public void enterCredentials(String userType) {
		autoPopulate.populateValues(this, data.getContainer(userType).getMandatoryFields());
	}

	public void clickLogin(){
		btn_logInToSiMON.click();		
	}
		
	public void VerifyErrorMessage(String MessageIdFromDataXML){
		
		
		assertThat("Error message NOT found on login page :(",div_ErrorMessage.isPresent());
		
		String ErrorMessage="";
		
/*		if (MessageIdFromDataXML.equals("Invalid username"))
			ErrorMessage = envData.getContainer("Messages").getField("InvalidUsernameOrPWD");*/
		
			
		System.out.println("ERROR MESSAGE  " + ErrorMessage);
		
		if(envData.getContainer("Messages").getField("InvalidUsernameOrPWD").equals(div_ErrorMessage.getText()))
		{
			System.out.println("---> ERROR MESSAGE FOUND");
		}
		else
		{
			System.out.println("---> ERROR NOT MESSAGE FOUND");	
		}
			
		
	}

	@Override
	public IntDataContainer getData() {
		return data;
	}
	
	
}




/*
 public class LoginPage extends SimonPage {

	private static IntDataContainer data;
	private AutoPopulate autoPopulate = new AutoPopulate();

	@FindBy(id = "username")
	public WebElementFacade tbx_username;

	@FindBy(id = "password")
	public WebElementFacade tbx_password;

	@FindBy(id = "Login")
	public WebElementFacade btn_logInToSalesforce;
	
	public LoginPage() {
		initialize();
		data = envData.getContainer(this.getClass().getSimpleName());
	}
	
	public void isExist() {
		assertThat("User is not in Login Page", btn_logInToSalesforce.isPresent());
	}

	public void enterCredentials(String userType) {
		autoPopulate.populateValues(this, data.getContainer(userType).getMandatoryFields());
	}

	public void clickLogin() {
		btn_logInToSalesforce.click();
	}

	@Override
	public IntDataContainer getData() {
		return data;
	}
} 
 * */
 